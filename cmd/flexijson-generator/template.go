package main

import "text/template"

var wrappingClassTemplate = template.Must(template.New("wrappingClass").Parse(`
/*
 Automatically generated by flexijson-generator, do not edit!
 */

package {{ .PackageName }}

import (
	"bytes"
	"encoding/json"
)

{{ range .Types }}

// Wrapping struct name: {{ .WrappingTypeName }}
// Target type name: {{ .TargetTypeName }}
{{ if .ExtraFieldName }}
// Detected extra field: {{ .ExtraFieldName }}
{{ end }}

type {{ .WrappingTypeName }} struct { {{ .TargetTypeName }} }

func (this *{{ .WrappingTypeName }}) UnmarshalJSON(data []byte) (err error) {
	// Decode fields to defined fields in struct
	if err = json.NewDecoder(bytes.NewReader(data)).Decode(&this.{{ .TargetTypeName }}); err != nil {
		return
	}
	
	{{ if .ExtraFieldName }}
	
	// Decode fields to extra map
	if err = json.NewDecoder(bytes.NewReader(data)).Decode(&this.{{ .TargetTypeName }}.{{ .ExtraFieldName }}); err != nil {
		return
	}
	
	{{ end }}
	
	return
}

func (this *{{ .WrappingTypeName }}) MarshalJSON() (data []byte, err error) {
	union := map[string]interface{}{}

	// Encode defined fields
	buf := new(bytes.Buffer)
	err = json.NewEncoder(buf).Encode(this.{{ .TargetTypeName }})
	
	{{ if .ExtraFieldName }}

	// Decode to union
	err = json.NewDecoder(buf).Decode(&union)
	for k, v := range this.Fields {
		if _, ok := union[k]; ok {
			// Do not overwrite value from defined field with value from map
			continue
		}
		union[k] = v
	}

	// Encode union
	buf = new(bytes.Buffer)
	err = json.NewEncoder(buf).Encode(union)
	if err != nil {
		return
	}
	
	{{ end }}

	data = buf.Bytes()
	return
}

{{ end }}
`))
